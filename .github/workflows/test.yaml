name: Terraform Workflow

on:
  workflow_call:
    inputs:
      file_type:
        required: true
        description: either terragrunt or terraform
        default: terragrunt
        type: string
      enable_static_checks:
        required: false
        description: run static checks like tflint and checkov
        type: boolean
        default: true
      plan:
        required: false
        description: run terragrunt plan
        type: boolean
        default: false
      apply:
        required: false
        description: run terragrunt apply
        type: boolean
        default: false

env:
  terraform_version: 1.11.4
  terragrunt_version: 0.77.14

jobs:
  get-terraform-changed-dirs:
    runs-on: ubuntu-latest
    outputs:
      dirs: ${{ steps.set-matrix.outputs.dirs }}
      found: ${{ steps.set-matrix.outputs.found }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '2'
      - name: Get changed terragrunt directories
        id: set-matrix
        run: |
          changed_files=`git diff --name-only HEAD^`
          changed_dirs=`for file in $changed_files; do dirname "$file"; done | sort -u`
          
          target_dirs=()
          target_files=""
          
          if [[ ${{ inputs.file_type }} == "terragrunt" ]]; then
            target_files="terragrunt.hcl"
          elif [[ ${{ inputs.file_type }} == "terraform" ]]; then
            target_file="*.tf"
          else
            exit 1
          endif
          
          for dir in $changed_dirs; do
            [ ! -d "$dir" ] && continue
          
            if ls "$dir"/terragrunt.hcl >/dev/null 2>&1; then
              target_dirs+=($dir)
            fi
          done
          
          if [ ${#target_dirs[@]} -gt 0 ]; then
            JSON_ARRAY=$(printf '"%s",' "${target_dirs[@]}" | sed 's/,$//')
            echo "dirs=[$JSON_ARRAY]" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "dirs=[]" >> $GITHUB_OUTPUT
            echo "found=false" >> $GITHUB_OUTPUT
          fi
          
          # Print the directories found for debugging
          echo "Directories with changes:"
          for dir in "${target_dirs[@]}"; do
            echo "- $dir"
          done

  apply-terraform:
    needs: get-terraform-changed-dirs
    if: needs.get-terraform-changed-dirs.outputs.found == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJson(needs.get-terraform-changed-dirs.outputs.dirs) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::790387652718:role/random-builds-github-tf-state-file
          aws-region: "us-east-2"

      - uses: terraform-linters/setup-tflint@v4
        if: inputs.enable_static_checks
        name: Setup TFLint

      - name: Run tflint
        if: inputs.enable_static_checks
        run: tflint --recursive ${{ matrix.directory }} --config $(pwd)/.tflint.hcl

      - name: Run checkov
        if: inputs.enable_static_checks
        uses: bridgecrewio/checkov-action@v12
        with:
          output_format: cli
          output_file_path: console
          directory: ${{ matrix.directory }}
          quiet: true
          download_external_modules: true

      - name: Run Trivy vulnerability scanner
        if: inputs.enable_static_checks
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: 'config'
          trivyignores: '.trivyignore.yaml'

      - name: Validate terragrunt
        if: inputs.enable_static_checks && inputs.file_type == 'terragrunt'
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.terraform_version }}
          tg_version: ${{ env.terragrunt_version }}
          tg_dir: ${{ matrix.directory }}
          tg_command: "validate"
        env:
          TF_VAR_GITHUB_ORGANIZATION: ${{ github.repository_owner }}
          TF_VAR_APP_ID: ${{ secrets.TF_VAR_APP_ID }}
          TF_VAR_APP_INSTALLATION_ID: ${{ secrets.TF_VAR_APP_INSTALLATION_ID }}
          TF_VAR_APP_PEM_FILE: ${{ secrets.TF_VAR_APP_PEM_FILE }}

      - name: Terragrunt plan
        if: inputs.file_type == 'terragrunt' && inputs.plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.terraform_version }}
          tg_version: ${{ env.terragrunt_version }}
          tg_dir: ${{ matrix.directory }}
          tg_command: "plan"
          tg_comment: '1'
        env:
          TF_VAR_GITHUB_ORGANIZATION: ${{ github.repository_owner }}
          TF_VAR_APP_ID: ${{ secrets.TF_VAR_APP_ID }}
          TF_VAR_APP_INSTALLATION_ID: ${{ secrets.TF_VAR_APP_INSTALLATION_ID }}
          TF_VAR_APP_PEM_FILE: ${{ secrets.TF_VAR_APP_PEM_FILE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terragrunt apply
        if: inputs.file_type == 'terragrunt' && inputs.apply
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.terraform_version }}
          tg_version: ${{ env.terragrunt_version }}
          tg_dir: ${{ matrix.directory }}
          tg_command: "apply"
        env:
          TF_VAR_GITHUB_ORGANIZATION: ${{ github.repository_owner }}
          TF_VAR_APP_ID: ${{ secrets.TF_VAR_APP_ID }}
          TF_VAR_APP_INSTALLATION_ID: ${{ secrets.TF_VAR_APP_INSTALLATION_ID }}
          TF_VAR_APP_PEM_FILE: ${{ secrets.TF_VAR_APP_PEM_FILE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup terraform
        if: inputs.file_type == 'terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.terraform_version }}

      - name: Terraform Init
        if: inputs.file_type == 'terraform'
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        if: inputs.file_type == 'terraform' && inputs.enable_static_checks
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        if: inputs.file_type == 'terraform' && inputs.apply
        run: terraform apply -auto-approve -input=false

      - name: Terraform Plan
        if: inputs.file_type == 'terraform' && inputs.plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && inputs.file_type == 'terraform' && inputs.plan
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            
            </details>
            
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })